{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/post.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPostId","getSelectedPost","className","map","post","userId","title","id","type","onClick","BASE_URL","request","url","config","fetch","then","response","json","getUserPosts","NewCommentForm","addComment","useState","name","setName","email","setEmail","userComment","setUserComment","onSubmit","event","preventDefault","placeholder","value","onChange","target","PostDetails","postDetails","setPostDetails","comments","setComments","isVissibleComments","setIsVissibleComments","receiveDetails","postId","postDetail","receiveComments","commentsFromServer","useEffect","deleteComment","commentId","method","removeComment","comment","filter","commentItem","body","length","hidden","newComment","headers","Accept","JSON","stringify","createComment","prev","App","setPosts","setSelectedPostId","users","setUsers","showPosts","usersFromServer","slice","disabled","defaultValue","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ceac6bc.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\ninterface Props {\n  posts: Post[],\n  selectedPostId: number,\n  getSelectedPost: (postId: number) => void;\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId,\n  getSelectedPost,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            {selectedPostId === post.id\n              ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => getSelectedPost(0)}\n                >\n                  Close\n                </button>\n              )\n              : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => getSelectedPost(post.id)}\n                >\n                  Open\n                </button>\n              )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url:string, config: RequestInit = {}) => {\n  return fetch(`${BASE_URL}${url}`, config)\n    .then(response => response.json());\n};\n","import { request } from './api';\n\nexport const getPosts = () => {\n  return request('/posts');\n};\n\nexport const getUserPosts = (userId?: number) => {\n  if (!userId) {\n    return getPosts();\n  }\n\n  return request(`/posts?userId=${userId}`);\n};\n\nexport const getPostDetails = (postId: number) => {\n  return request(`/posts/${postId}`);\n};\n\nexport const getPostComments = (postId: number) => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const removeComment = (commentId: number) => {\n  return request(`/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const createComment = (newComment: UnpablishedComment) => {\n  return request('/comments', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(newComment),\n  });\n};\n\nexport const getUsers = () => {\n  return request('/users');\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  addComment: (name: string, email: string, userComment: string) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = ({ addComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [userComment, setUserComment] = useState('');\n\n  const clearInputs = () => {\n    setName('');\n    setEmail('');\n    setUserComment('');\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    addComment(name, email, userComment);\n    clearInputs();\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={userComment}\n          onChange={(event) => setUserComment(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  getPostDetails,\n  getPostComments,\n  removeComment,\n  createComment,\n} from '../../api/post';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  selectedPostId: number,\n}\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isVissibleComments, setIsVissibleComments] = useState(false);\n\n  const receiveDetails = () => {\n    getPostDetails(selectedPostId)\n      .then(postDetail => setPostDetails(postDetail));\n  };\n\n  const receiveComments = () => {\n    getPostComments(selectedPostId)\n      .then(commentsFromServer => setComments(commentsFromServer));\n  };\n\n  useEffect(() => {\n    receiveDetails();\n    receiveComments();\n  }, [selectedPostId]);\n\n  const getAllComments = () => {\n    setIsVissibleComments(!isVissibleComments);\n  };\n\n  const deleteComment = (commentId: number) => {\n    removeComment(commentId)\n      .then(comment => {\n        if (comment) {\n          setComments(\n            comments.filter(commentItem => commentItem.id !== commentId),\n          );\n        }\n      });\n  };\n\n  const addNewComment = (name: string, email: string, body: string) => {\n    const newComment: UnpablishedComment = {\n      postId: selectedPostId,\n      name,\n      email,\n      body,\n    };\n\n    createComment(newComment)\n      .then(comment => {\n        setComments(prev => [...prev, comment]);\n      });\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length\n          ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              hidden={comments.length < 1}\n              onClick={getAllComments}\n            >\n              {isVissibleComments ? 'Hide comments' : 'Show comments'}\n            </button>\n          ) : (\n            <p className=\"PostDetails__list-item\">\n              There are not any comments\n            </p>\n          )}\n        {isVissibleComments\n          && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(comment => (\n                <li className=\"PostDetails__list-item\" key={comment.id}>\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => deleteComment(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm addComment={addNewComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts, getUsers } from './api/post';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [users, setUsers] = useState<User[]>([]);\n\n  const showPosts = (userId?: number) => {\n    getUserPosts(userId)\n      .then(setPosts);\n  };\n\n  useEffect(() => {\n    showPosts();\n    getUsers()\n      .then(usersFromServer => {\n        setUsers(usersFromServer.slice(0, 10));\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => {\n              showPosts(+event.target.value);\n            }}\n          >\n            <option\n              disabled\n              defaultValue=\"Chose user\"\n            >\n              Choose user\n            </option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            getSelectedPost={setSelectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {!!selectedPostId\n            && <PostDetails selectedPostId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}